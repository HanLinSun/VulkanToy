//Copyright 2024 Hanlin Sun
// Shader is looseley based on the ray tracing coding session by Inigo Quilez (www.iquilezles.org) and Sascha willems example
#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, rgba8) uniform writeonly image2D targetTexture;

const float pi = 3.1415926535897932385;

struct Camera 
{
	vec3 pos;   
	vec3 lookat;
	float fov; 
};

layout(binding =1) uniform UniformBufferObject {
    Camera camera;
    float aspect_ratio;
} ubo;

// Random functions
 //#include "Shader/random.glsl"

 struct Ray
 {
    vec3 origin;
    vec3 direction;
    //float tMax;
    //Medium media;
 };

 vec3 RayAt(Ray r, float t)
 {
     return r.origin + r.direction*t;
 }

 bool hit_sphere(const vec3 center, double radius, const Ray r)
 {
     vec3 oc = center -r.origin;
     double a = dot(r.direction, r.direction);
     double b = -2.0 * dot(r.direction, oc);
     double c = dot(oc,oc) - radius*radius;
     double discriminant = b*b - 4*a*c;
     if(discriminant>=0) return true;
     else return false;
 }
 
 //Test Experiment
 vec3 TraceRay(Ray r)
 {      
     vec3 unit_direction = normalize(r.direction);
     float a = 0.5*(unit_direction.y+ 1.0);
     return (1.0-a)*vec3(1.0, 1.0, 1.0) + a*vec3(0.5, 0.7, 1.0);
 }

 void main()
 {
    vec2 image_size =vec2(imageSize(targetTexture));
    float theta = ubo.camera.fov * pi/180.f;

    float h = tan(theta/2);
    float viewport_height =2.0*h;
    float viewport_width = image_size.x /image_size.y *viewport_height;
    float focal_length =1.0;

    // Calculate the vectors across the horizontal and down the vertical viewport edges.
    vec3 horizontal =vec3(viewport_width,0,0);
    vec3 vertical =vec3(0,-viewport_height,0);

    vec3 lower_left_corner = ubo.camera.pos -horizontal/2 - vertical/2 -vec3(0,0,focal_length);
    vec2 uv = (gl_GlobalInvocationID.xy) /image_size.xy;

    Ray r;
    r.origin = ubo.camera.pos;
    r.direction =lower_left_corner +uv.x * horizontal +uv.y *vertical - r.origin;
    vec3 pixelColor = TraceRay(r);

    //vec4 currentColor = imageLoad(accumulationTex, ivec2(gl_GlobalInvocationID.xy)).rgba * min(ubo.currentSample, 1.0);
    //vec4 to_write = (vec4(pixel_color, 1.0) + currentColor*(ubo.currentSample)) / (ubo.currentSample+1.0);

    imageStore(targetTexture, ivec2(gl_GlobalInvocationID.xy), vec4(pixelColor,0.0));

 }
