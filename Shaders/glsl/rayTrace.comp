#version 450 core
#include "random.glsl"
#include "intersections.glsl"

#define MAX_STACK_DEPTH 24

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, rgba8) uniform writeonly image2D targetTexture;

layout(binding = 1) uniform UniformBufferObject{
    RayTraceUniformBuffer ubo;
};

layout(binding = 2) readonly buffer TriangleBufferObject
{
    Triangle[] triangles;
};

layout(binding = 3) readonly buffer PBRMaterialBufferObject
{
    PBRMaterial[] PBRaterials;
};

layout(binding = 4) readonly buffer SpheresBufferObject {
    Sphere[] spheres;
};

layout(binding = 5) uniform sampler2D[] materialTextures;


layout(binding = 6) readonly buffer LightBufferObject
{
    Light[] lights;
};

layout(std430, binding = 7) readonly buffer AabbBufferObject {
    BVHNode[] bvhNodes;
 };


vec3 RayAt(Ray r, double t)
{
    return r.origin + r.direction * float(t);
}


bool HitTriangle(int triangle_index, Ray r,float tMin, float tMax,  inout Intersection intersection)
{
    Triangle t = triangles[triangle_index];
    vec3 n = vec3(0, 0, 0);
    vec3 hit = TriangleIntersection(r.origin, r.direction, t, n);
    if (!(hit.y < 0.0 || hit.y>1.0 || hit.z < 0.0 || (hit.y + hit.z)>1.0))
    {
        intersection.position = r.origin + hit.x * r.direction;
        intersection.normal = normalize(n);
        intersection.backFaceFlag = dot(r.direction, intersection.normal) > 0 ? 1 : 0;
        intersection.normal *= 1 - 2 * intersection.backFaceFlag;
        intersection.position += intersection.normal * 0.0001;
        intersection.t = hit.x;
        intersection.materialIndex = t.materialIdx;
        return hit.x > tMin && hit.x < tMax;
    }
    return false;
}

bool HitBoundingBox(Ray r, vec3 boxMin, vec3 boxMax)
{
    // world space intersection test
    vec3 tMin = (boxMin - r.origin)/r.direction;
    vec3 tMax = (boxMax -r.origin)/r.direction;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    if(tNear >=tFar) return false;
    else return true;
}

bool HitSphere(int sphere_index, Ray r, float tMin, float tMax, inout Intersection intersection)
{
    vec3 center = spheres[sphere_index].sphere.xyz;
    float radius = spheres[sphere_index].sphere.w;
    vec3 oc = center - r.origin;
    float a = dot(r.direction, r.direction);
    float half_b = dot(r.direction, oc);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = half_b * half_b - a * c;

    if (discriminant < 0)
    {
        return false;
    }
    float sqrt_d = sqrt(discriminant);

    // Find the nearest root that lies in the acceptable range.
    float root = (half_b - sqrt_d) / a;
    intersection.backFaceFlag = 0;
    if (root < tMin || tMax < root)
    {
        root = (half_b + sqrt_d) / a;
        intersection.backFaceFlag = 1;
        if (root <= tMin || tMax <= root)
            return false;
    }

    intersection.t = root;
    intersection.position = RayAt(r, intersection.t);
    intersection.normal = (1 - 2 * intersection.backFaceFlag) * ((intersection.position - center) / radius);
    return true;
}


//Based on PBRT - BVH intersect
bool HitBVHNode(Ray r , inout Intersection intersection)
{
    float tMin = 0.001;
    float tMax = 10000;
    int toVisitOffset = 0;
    int currentNodeIndex = 0;
    int nodesToVisit[64];

    float closest_intersection = tMax;
    nodesToVisit[toVisitOffset++] =0;

    vec3 invDir=vec3(1 / r.direction.x, 1 / r.direction.y, 1 / r.direction.z);
    bool dirIsNeg[3] = { invDir.x < 0, invDir.y < 0, invDir.z < 0 };

    bool hitAnything =false;
    while(toVisitOffset>0)
    {
       currentNodeIndex= nodesToVisit[--toVisitOffset];

       BVHNode node = bvhNodes[currentNodeIndex];
       if(node.isLeaf !=1)
       {
          bool intersectBoundBox = HitBoundingBox(r, node.min, node.max);
          if(!intersectBoundBox) continue;

            // Advance to the near node first
            if (dirIsNeg[bvhNodes[currentNodeIndex].axis]) {
                nodesToVisit[toVisitOffset++] = node.leftNodeIndex;
                nodesToVisit[toVisitOffset++] = node.rightNodeIndex;
            }
            else {
                nodesToVisit[toVisitOffset++] = node.rightNodeIndex;
                nodesToVisit[toVisitOffset++] = node.leftNodeIndex;
            }
       }
       else
       {
            if (node.triangleIndex ==-1 && node.sphereIndex==-1) continue;
            if(node.triangleIndex !=-1)
            {
                Intersection temp_insec;
                if(HitTriangle(node.triangleIndex, r, tMin, closest_intersection ,temp_insec))
                {
                  hitAnything =true;
                  closest_intersection=temp_insec.t;
                  intersection =temp_insec;
                }
            }

            if(node.sphereIndex!=-1)
            {
                Intersection temp_insec;
                if(HitSphere(node.triangleIndex, r, tMin, closest_intersection,temp_insec))
                {
                   hitAnything =true;
                   closest_intersection=temp_insec.t;
                  intersection =temp_insec;
                }
            }
       }
    }
    return hitAnything;

}

bool HitScene(Ray r, inout Intersection intersection) {
    float tMin = 0.0001;
    float tMax = INFINITY;

    Intersection temp_intersection;
    bool hitAnything = false;
    float closestIntersection = tMax;

        for (int i = 0; i<ubo.numTriangles; i++) {
        if (HitTriangle(i, r, tMin, closestIntersection, temp_intersection)) {
            hitAnything = true;
            closestIntersection = temp_intersection.t;
            intersection =  temp_intersection;
        }
    }
    closestIntersection = tMax;
    
//    for (int j = 0; j < ubo.numSpheres; j++) {
//        if (HitSphere(j, r, tMin, closestIntersection, temp_intersection)) {
//           hitAnything = true;
//           closestIntersection = temp_intersection.t; 
//           intersection = temp_intersection;
//       }
//     }
    return hitAnything;
 }


vec3 TraceRay(Ray r)
{
    Intersection intersection;
    vec3 radiance = vec3(1.0);
    Ray currentRay = r;

    for (int i = 0; i < ubo.maxDepth; i++)
    {
//       if (HitScene(currentRay, intersection))
       if(HitBVHNode(currentRay,intersection))
        {
            vec3 direction = intersection.normal + RandomInUnitSphere();
           currentRay.origin = intersection.position;
            currentRay.direction = normalize(direction);
            radiance *= 0.5;
        }
        else
        {
            vec3 unitDirection = normalize(currentRay.direction);
            float a = 0.5 * (unitDirection.y + 1.0);
            radiance *= (1.0 - a) * vec3(1.0, 1.0, 1.0) + a * vec3(0.5, 0.7, 1.0);
            break; // Exit the loop since there's no further intersection
        }
    }



     return radiance;
}

vec3 GammaCorrect(vec3 color)
{
     float gammaVal =1/2.2;
     float r = pow(color.r, gammaVal);
     float g = pow(color.g,gammaVal);
     float b = pow(color.b,gammaVal);
     return vec3(r,g,b);
}

void main()
{

	mat4 projInv = inverse(ubo.projMatrix); //projection to camera
	mat4 viewInv = inverse(ubo.viewMatrix); //cameraToWorld

    vec2 image_size = vec2(imageSize(targetTexture));
    float theta = ubo.cameraFOV * PI / 180.f;

    float h = tan(theta / 2);
    float viewport_height = 2.0 * h;
    float viewport_width = (image_size.x / image_size.y) * viewport_height;
    float focal_length = ubo.focalDistance;

    // Calculate the vectors across the horizontal and down the vertical viewport edges.
    vec3 viewport_u = vec3(viewport_width, 0, 0);
    vec3 viewport_v = vec3(0, -viewport_height, 0);

    vec3 pixel_delta_u = viewport_u / image_size.x; //pixel width
    vec3 pixel_delta_v = viewport_v / image_size.y; //pixel height

    vec3 viewport_upper_left = ubo.cameraPos - viewport_u/ 2 - viewport_v / 2 - vec3(0, 0, focal_length);
    vec3 pixel00_loc = viewport_upper_left + 0.5 * (pixel_delta_u + pixel_delta_v);
     

    vec3 radiance = vec3(0.0);

    uint SPP = ubo.spp; //sample per pixel

    for(int i=0;i<SPP;i++)
    {
       //size varient from pixel size[x: 0-1 y: 0-1]
        vec2 jitter = vec2(Random(),Random())/ image_size;

        vec3 pixelPos_vs = pixel00_loc + (gl_GlobalInvocationID.x+jitter.x) * pixel_delta_u + (gl_GlobalInvocationID.y+jitter.y) * pixel_delta_v;
        vec4 pixelPos_ws = viewInv  * vec4(pixelPos_vs,1);

        Ray r;
        r.origin = ubo.cameraPos;
        r.direction =vec3(pixelPos_vs.xyz - r.origin);

        radiance += TraceRay(r);
    }

    radiance /= float(SPP);
    radiance =GammaCorrect(radiance);

    imageStore(targetTexture, ivec2(gl_GlobalInvocationID.xy), vec4(radiance, 0.0));

}
