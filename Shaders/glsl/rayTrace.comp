//Copyright 2024 Hanlin Sun
// Shader is looseley based on the ray tracing in one week, modified to Compute version
#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, rgba8) uniform writeonly image2D targetTexture;

layout(binding =1) uniform UniformBufferObject {
    Camera camera;
    float aspect_ratio;
} ubo;

layout(std430, binding = 2) readonly buffer TriangleBufferObject
{
   Triangle[] triangles;
}

layout(std430, binding =3) readonly buffer MaterialBufferObject
{
    Material[] materials;
}

 layout(std430, binding = 4) readonly buffer SpheresBufferObject {
    Sphere[] spheres;
 };

 layout(std430,binding = 5) readonly buffer TextureBufferObject
 {
    image2D[] materialTextures;
 }

layout(std430,binding =6) readonly buffer LightBufferObject
{
}

struct Camera 
{
	vec3 pos;   
	vec3 lookat;
	float fov; 
};



// Random functions
 #include "random.glsl"
 #include "definitions.glsl"

 vec3 RayAt(Ray r, double t)
 {
     return r.origin + r.direction * float(t);
 }


 float HitSphere(int sphere_index, float tMin, float tmax,  Ray r , inout Intersection intersection)
 {
     vec3 center = spheres[sphere_index].s.xyz;
     float radius = spheres[sphere_index].s.w;

     vec3 oc = center -r.origin;
     float a = dot(r.direction, r.direction);
     float half_b =  dot(r.direction, oc);
     float c = dot(oc,oc) - radius*radius;
     float discriminant = half_b*half_b - a*c;

     if(discriminant<0)
     {
         return -1.0;
     }
     float sqrt_d = sqrt(discriminant);

     // Find the nearest root that lies in the acceptable range.
     float root = (half_b - sqrt_d)/a;
     intersection.backFaceFlag = 0;
     if(root <tMin || tMax<root)
     {
         root = (half_b + sqrt_d)/a;
         intersection.backFaceFlag =1;
         if (root <= tMin || tMax <= root)
                return false;
     }

        intersection.t = root;
        intersection.position = RayAt(r , intersection.t);

        intersection.normal = (1 - 2*intersection.backFaceFlag)* ((intersection.position - center) / radius);

        return true;
 }


 vec3 TriangleIntersection(in vec3 ro, in vec3 rd, triangle tri, inout vec3 n )
 {
 }

 
 vec3 TraceRay(Ray r)
 {    
   double t = HitSphere(vec3(0,0,-1), 0.3, r);
   if(t>0.0)
   {
       vec3 sphereNormal = normalize(RayAt(r,t) - vec3(0,0,-1));
       return 0.5*vec3(sphereNormal.x+1, sphereNormal.y+1, sphereNormal.z+1);
   }
     vec3 unit_direction = normalize(r.direction);
     float a = 0.5*(unit_direction.y+ 1.0);
     return (1.0-a)*vec3(1.0, 1.0, 1.0) + a*vec3(0.5, 0.7, 1.0);
 }


 void main()
 {
    vec2 image_size =vec2(imageSize(targetTexture));
    float theta = ubo.camera.fov * pi/180.f;

    float h = tan(theta/2);
    float viewport_height =2.0*h;
    float viewport_width = image_size.x /image_size.y *viewport_height;
    float focal_length =1.0;

    // Calculate the vectors across the horizontal and down the vertical viewport edges.
    vec3 horizontal =vec3(viewport_width,0,0);
    vec3 vertical =vec3(0,-viewport_height,0);

    vec3 lower_left_corner = ubo.camera.pos -horizontal/2 - vertical/2 -vec3(0,0,focal_length);
    vec2 uv = (gl_GlobalInvocationID.xy) /image_size.xy;

    Ray r;
    r.origin = ubo.camera.pos;
    r.direction = lower_left_corner +uv.x * horizontal +uv.y *vertical - r.origin;

    vec3 pixelColor = TraceRay(r);


    imageStore(targetTexture, ivec2(gl_GlobalInvocationID.xy), vec4(pixelColor,0.0));

 }
