#version 460 core
#include "random.glsl"
#include "intersections.glsl"
#include "sample.glsl"
#include "DisneyBSDF.glsl"
#define MAX_STACK_DEPTH 64
#extension GL_EXT_nonuniform_qualifier : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, rgba8) uniform writeonly image2D targetTexture;

layout(binding = 1) uniform UniformBufferObject{
    RayTraceUniformBuffer ubo;
};

layout(binding = 2) readonly buffer PrimitiveBufferObject
{
    Primitive[] primitives;
};

layout(binding = 3) readonly buffer PBRMaterialBufferObject
{
    PBRMaterial[] Materials;
};

layout(binding = 4) uniform sampler2D[] materialTextures;

layout(binding = 5) readonly buffer LightBufferObject
{
    Light[] lights;
};

layout(std430, binding = 6) readonly buffer BVHBufferObject {
   LBVHNode[] bvhNodes;
 };

 vec3 GammaCorrect(vec3 color)
{
     float gammaVal =1/2.2;
     float r = pow(color.r, gammaVal);
     float g = pow(color.g,gammaVal);
     float b = pow(color.b,gammaVal);
     return vec3(r,g,b);
}

vec3 RayAt(Ray r, double t)
{
    return r.origin + r.direction * float(t);
}

bool HitScene(Ray r, inout Intersection intersection)
{
  bool hit =false;
  float tMin=MINIMUM;
  float tMax =INFINITY;
  Intersection temp_insec;
  float closest =tMax;
  for(int i=0;i<ubo.numPrimitives;i++)
  {  
      if(HitPrimitive(primitives[i],tMin,closest ,r,temp_insec))
      {
          hit=true;
          intersection =temp_insec;
          closest =temp_insec.t;
      }
  }
  return hit;
}

bool HitScene(Ray r, inout Intersection intersection,float maxDist)
{
  bool hit =false;
  float tMin=MINIMUM;
  float closest =maxDist;

  for(int i=0;i<ubo.numPrimitives;i++)
  {
      if(HitPrimitive(primitives[i],tMin,closest, r, intersection))
      {
         hit =true;
      }
  }
  return hit;
}

bool HitBVHNode(in Ray r , inout Intersection intersection)
{
    float tMin =MINIMUM;
    float tMax =INFINITY;

    bool hit=false;
    float closest =tMax;

    int nodeStack[MAX_STACK_DEPTH];
    int toVisitOffset = 0;
    int currentNodeIndex = 0;
    vec3 invDir =vec3(1.0f / r.direction.x, 1.0f / r.direction.y, 1.f / r.direction.z);
    bool dirIsNeg[3] = {invDir.x < 0, invDir.y < 0, invDir.z < 0};
    //use stack to traverse BVH node
    while(true)
    {
       LBVHNode node = bvhNodes[currentNodeIndex];
       if(HitBoundingBox(r, node.pMin, node.pMax))
       {
             if(node.primitiveIdx !=-1)
             {
                 if(HitPrimitive(primitives[node.primitiveIdx],tMin, closest,r, intersection))
                 {
                     hit =true;
                     closest = intersection.t;
                 }
                 if (toVisitOffset == 0) break;
                 currentNodeIndex = nodeStack[--toVisitOffset];
             }
             else
             {
                if (dirIsNeg[node.splitAxis]==true) {
                    /// second child first
                    nodeStack[toVisitOffset++] = currentNodeIndex + 1;
                    currentNodeIndex = node.secondChildOffset;
                } else {
                    nodeStack[toVisitOffset++] = node.secondChildOffset;
                    currentNodeIndex = currentNodeIndex + 1;
                }
             }
       }
       else
       {
            if (toVisitOffset == 0) break;
            currentNodeIndex = nodeStack[--toVisitOffset];
       }
    }
    return hit;
}

bool HitLight(Ray r, inout Intersection intersection,inout LightSample lightSample)
{
  float closest =INFINITY;
  for(uint i=0; i<ubo.numLights;i++)
  {
     Light light = lights[i];
     if(light.type ==RECT_LIGHT)
     {
         AreaLightIntersectionTest(r, closest, light,lightSample);
     }
     else if(light.type ==SPHERE_LIGHT)
     {
        SphereLightIntersectionTest(r, closest, light,lightSample);
     }
  }
  	return closest < INFINITY;
}

bool CloestHit(Ray r, inout Intersection intersection, inout LightSample lightSample)
{
   float t=INFINITY;
   float d;
   if(ubo.numLights>0)
   {
      if(HitLight(r, intersection, lightSample))
      {
          intersection.isEmitter =true;
      }
   }
   // return HitBVHNode(r, intersection);
      return HitScene(r, intersection);
}


bool AnyHitCheck(in Ray r, float maxDist)
{
   Intersection temp_isect;
   if(ubo.numLights >0)
   {
       for(uint i=0; i<ubo.numLights;i++)
       {
            Light light =lights[i];
            if(light.type==RECT_LIGHT)
            {
                float dist = HitRectPlane(r, light);
                if (dist > 0.0 && dist < maxDist)
               return true;
            }
            else if(light.type==SPHERE_LIGHT)
            {
                float dist = HitSphereLight(r,light);
                if (dist > 0.0 && dist < maxDist)
                return true;
           }
       }
    }
      //return HitBVHNode(r,temp_isect);

      return HitScene(r, temp_isect, maxDist);
}

PBRMaterial GetHitMaterialProperties(in Ray r, inout Intersection intersection)
{
    PBRMaterial material =Materials[intersection.material_ID];
    if(material.albedoTextureID >0)
    {
         int ID =material.albedoTextureID;
         vec4 color = texture(materialTextures[ID], intersection.texCoords);
         material.baseColor.rgb *= GammaCorrect(color.rgb);
         material.opacity *= color.a;
    }

    if(material.normalTextureID>0)
    {
         int ID =material.normalTextureID;
         vec3 texNormal = texture(materialTextures[ID], intersection.texCoords).rgb;
         texNormal = normalize(texNormal * 2.0 - 1.0);
         vec3 origNormal = intersection.normal;
         intersection.normal = normalize( intersection.tangent * texNormal.x +  intersection.bitangent * texNormal.y +  intersection.normal * texNormal.z);
         intersection.ffnormal = dot(origNormal, r.direction) <= 0.0 ?  intersection.normal : - intersection.normal;
    }

    if(material.metallicRoughnessTextureID >0)
    {
       int ID = material.metallicRoughnessTextureID;
       vec2 matRgh = texture(materialTextures[ID], intersection.texCoords).bg;
       material.metallic = matRgh.x;
       material.roughness =max(matRgh.y * matRgh.y, 0.001);;
    }

    if(material.emissonMapTextureID >0)
    {
       int ID = material.emissonMapTextureID;
       vec3 tex_emission = texture(materialTextures[ID], intersection.texCoords).rgb;
       material.emission = GammaCorrect(tex_emission);
    }

    float aspect = sqrt(1.0 - material.anisotropic * 0.9);
    material.ax = max(0.001, material.roughness / aspect);
    material.ay = max(0.001, material.roughness * aspect);

    if(material.ior>0)
    {
        intersection.eta = dot(r.direction, intersection.normal) < 0.0 ? (1.0 / material.ior) : material.ior;
    }
    else intersection.eta =0;

    return material;
}

// https://pbr-book.org/3ed-2018/Light_Transport_I_Surface_Reflection/Direct_Lighting
vec3 DirectLight(in Ray r, in Intersection intersection)
{
      vec3 Ld =vec3(0.0);
      vec3 Li = vec3(0.0); //incident radiance

      vec3 scatterPos = intersection.position + intersection.normal * EPSILON;


      BSDFSample bsdfSample;
      LightSample lightSample;

      //Light LTE
      if(ubo.numLights ==0) return Ld;

      int index = int(Random()* float(ubo.numLights));
      Light light = lights[index];
      SampleOneLight(light, scatterPos, lightSample,float(ubo.numLights));
      Li = light.emission;

      //Quad Light single side emission
      if(dot(lightSample.direction, lightSample.normal)<0.0)
      {
           Ray shadowRay = Ray(scatterPos, lightSample.direction);

           bool inShadow = AnyHitCheck(shadowRay, lightSample.distance-EPSILON);
            
           //BSDF LTE
            if (!inShadow)
            {
              //Visible
                PBRMaterial material =GetHitMaterialProperties(r, intersection);

                r.direction = normalize(r.direction);

                bsdfSample.f = EvalDisney(intersection, material, -r.direction, intersection.ffnormal, lightSample.direction, bsdfSample.pdf);

                float misWeight = 1.0;

                if(light.area > 0.0) // No MIS for distant light
                    misWeight = PowerHeuristic(lightSample.pdf, bsdfSample.pdf);

                if (bsdfSample.pdf > 0.0)
                    Ld += misWeight * Li * bsdfSample.f / lightSample.pdf;
            }
      }

      //Ld =0.0
      return Ld;
}

vec3 TraceRaySimple(Ray r)
{
   Intersection intersection;
   vec3 radiance=vec3(1.0);
   Ray currentRay = r;
   int bounces;
    for (bounces=0;;bounces++)
    {
          if(HitBVHNode(currentRay,intersection))
          {
                  float r1=Random();
                  float r2 =Random();
                  vec3 direction = CosineSampleHemisphere(r1,r2);
                  vec3 albedo =Materials[intersection.material_ID].baseColor;
                  currentRay.origin = intersection.position + intersection.normal *EPSILON;
                  currentRay.direction = normalize(direction);
                  radiance *= albedo;
          }
          else
          {
                  vec3 unitDirection = normalize(currentRay.direction);
                  float a = 0.5 * (unitDirection.y + 1.0);
                  radiance *= (1.0 - a) * vec3(1.0, 1.0, 1.0) + a * vec3(0.5, 0.7, 1.0);
                  break; 
          }

          if(bounces>=ubo.maxDepth) break;
    }
    return radiance;
}

vec3 TraceRay(Ray r)
{
    Intersection intersection;
    vec3 radiance = vec3(0.0);
    vec3 throughput =vec3(1.0);

    LightSample lightSample;
    BSDFSample bsdfSample;
    Ray currentRay = r;

    int bounces;
    for (bounces = 0;; bounces++)
    {
    
       bool hit =CloestHit(currentRay, intersection, lightSample);
       //bool hit= HitScene(currentRay,intersection);
      
        // Terminate path if ray escaped
        //TODO: add skybox and HDR skymap reflection when ray escaped
        if(!hit) break;

        PBRMaterial material = GetHitMaterialProperties(r, intersection);

        radiance += material.emission * throughput;
        // Gather radiance from light and use bsdfSample.pdf from previous bounce for MIS
        //Hit light, terminate the ray
        if(intersection.isEmitter)
        {
            float misWeight = 1.0f;
            if(bounces >0)
            {
                 misWeight = PowerHeuristic(bsdfSample.pdf, lightSample.pdf);
            }
            radiance += misWeight * lightSample.emission * throughput;
            break;
        }
       
        //Terminate ray if maxDepth was reached
        if(bounces >=ubo.maxDepth) break;

        //Sample Light
        radiance += DirectLight(r, intersection)*throughput;

        // Sample BSDF for color and outgoing direction
        bsdfSample.f =SampleDisney(intersection,material, -r.direction, intersection.ffnormal, bsdfSample.L, bsdfSample.pdf);

        if(bsdfSample.pdf>0.0)
        {
            throughput*=bsdfSample.f /bsdfSample.pdf;
        }
        else break;

        r.direction = bsdfSample.L;
        r.origin = intersection.position + r.direction*EPSILON;

        //Russian Roulette 
         if (bounces >=3)
        {
            float q = min(max(throughput.x, max(throughput.y, throughput.z)) + 0.001, 0.95);
            if (Random() > q)
                break;
            throughput /= q;
        }
    }
     return radiance;
}



void main()
{
   mat4 projInv =inverse(ubo.projMatrix);
   mat4 viewInv =inverse(ubo.viewMatrix);

    vec2 image_size = vec2(imageSize(targetTexture));

    uint SPP = ubo.spp; //sample per pixel
    vec3 radiance =vec3(0.0);

    for(int i=0;i<SPP;i++)
    {
       //size varient from pixel size[x: 0-1 y: 0-1]
        vec2 jitter = vec2(Random(),Random())/ image_size;

        float r1 =Random();
        float r2 =Random();

		vec3 lensOffset = vec3(0.01f/ 2.0 * SampleUniformDiskConcentric(r1,r2), 0.0);
        vec2 pixel     = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y) + jitter;
       	vec2 uv        = vec2((pixel.x / image_size.x) * 2.0 - 1.0, (1.0 - pixel.y / image_size.y) * 2.0 - 1.0);
        vec4 origin    = viewInv * vec4(lensOffset, 1.0);
		vec4 target    = projInv * vec4(uv.x, uv.y, 1.0, 1.0);
		vec4 direction = viewInv * vec4(normalize(target.xyz * 0.5 - lensOffset), 0.0);

        vec3 rayDirection = normalize(direction.xyz); 
        Ray r;
        r.origin =origin.xyz;
    	r.direction = normalize(rayDirection);

        radiance += TraceRay(r);
        //radiance += TraceRaySimple(r);
    }

    radiance /= float(SPP);
    radiance =GammaCorrect(radiance);

    imageStore(targetTexture, ivec2(gl_GlobalInvocationID.xy), vec4(radiance, 0.0));

}
