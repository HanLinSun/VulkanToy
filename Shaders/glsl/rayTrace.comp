#version 450 core
#include "random.glsl"
#include "intersections.glsl"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, rgba8) uniform writeonly image2D targetTexture;

layout(binding = 1) uniform UniformBufferObject{
    RayTraceUniformBuffer ubo;
};

layout(binding = 2) readonly buffer TriangleBufferObject
{
    Triangle[] triangles;
};

layout(binding = 3) readonly buffer MaterialBufferObject
{
    Material[] materials;
};

layout(binding = 4) readonly buffer SpheresBufferObject {
    Sphere[] spheres;
};

layout(binding = 5) uniform sampler2D[] materialTextures;

layout(binding = 6) readonly buffer LightBufferObject
{
    Light[] lights;
};


vec3 RayAt(Ray r, double t)
{
    return r.origin + r.direction * float(t);
}



bool HitTriangle(int triangle_index, Ray r, float tMin, float tMax, inout Intersection intersection)
{
    Triangle t = triangles[triangle_index];
    vec3 n = vec3(0, 0, 0);
    vec3 hit = TriangleIntersection(r.origin, r.direction, t, n);
    if (!(hit.y < 0.0 || hit.y>1.0 || hit.z < 0.0 || (hit.y + hit.z)>1.0))
    {
        intersection.position = r.origin + hit.x * r.direction;
        intersection.normal = normalize(n);
        intersection.backFaceFlag = dot(r.direction, intersection.normal) > 0 ? 1 : 0;
        intersection.normal *= 1 - 2 * intersection.backFaceFlag;
        intersection.position += intersection.normal * 0.0001;
        intersection.t = hit.x;
        intersection.materialIndex = t.materialIdx;
        return hit.x > tMin && hit.x < tMax;
    }
    return false;
}

bool HitSphere(int sphere_index, Ray r, float tMin, float tMax, inout Intersection intersection)
{
    vec3 center = spheres[sphere_index].sphere.xyz;
    float radius = spheres[sphere_index].sphere.w;
    vec3 oc = center - r.origin;
    float a = dot(r.direction, r.direction);
    float half_b = dot(r.direction, oc);
    float c = dot(oc, oc) - radius * radius;
    float discriminant = half_b * half_b - a * c;

    if (discriminant < 0)
    {
        return false;
    }
    float sqrt_d = sqrt(discriminant);

    // Find the nearest root that lies in the acceptable range.
    float root = (half_b - sqrt_d) / a;
    intersection.backFaceFlag = 0;
    if (root < tMin || tMax < root)
    {
        root = (half_b + sqrt_d) / a;
        intersection.backFaceFlag = 1;
        if (root <= tMin || tMax <= root)
            return false;
    }

    intersection.t = root;
    intersection.position = RayAt(r, intersection.t);
    intersection.normal = (1 - 2 * intersection.backFaceFlag) * ((intersection.position - center) / radius);
    return true;
}

bool HitScene(Ray r, inout Intersection intersection) {
    float tMin = MINIMUM;
    float tMax = INFINITY;

    Intersection temp_intersection;
    bool hitAnything = false;
    float closestSoFar = tMax;


//   for (int i = 0; i<ubo.numTriangles; i++) {
//      if (HitTriangle(i, r, tMin, closestSoFar, temp_intersection)) {
//       hitAnything = true;
//      closestSoFar = temp_intersection.t;
//        intersection = temp_intersection;
//      }
//  }

   closestSoFar = tMax;

    for (int j = 0; j < ubo.numSpheres; j++) {
        if (HitSphere(j, r, tMin, closestSoFar, temp_intersection)) {
            hitAnything = true;
            closestSoFar = temp_intersection.t;
            intersection = temp_intersection;
        }
    }

    return hitAnything;
}


vec3 TraceRay(Ray r)
{
    Intersection intersection;
    vec3 accumulatedColor = vec3(1.0);
    Ray currentRay = r;

    for (int i = 0; i < ubo.maxDepth; i++)
    {
        if (HitScene(r, intersection))
        {
            vec3 direction = RandomInHemisphere(intersection.normal);
            currentRay.origin = intersection.position;
            currentRay.direction = normalize(direction);
            accumulatedColor *= 0.9;
        }
        else
        {
            vec3 unitDirection = normalize(currentRay.direction);
            float a = 0.5 * (unitDirection.y + 1.0);
            accumulatedColor *= (1.0 - a) * vec3(1.0, 1.0, 1.0) + a * vec3(0.5, 0.7, 1.0);
            break; // Exit the loop since there's no further intersection
        }
    }
    return  accumulatedColor;
}

void main()
{
    vec2 image_size = vec2(imageSize(targetTexture));
    float theta = ubo.cameraFOV * PI / 180.f;

    float h = tan(theta / 2);
    float viewport_height = 2.0 * h;
    float viewport_width = image_size.x / image_size.y * viewport_height;
    float focal_length = ubo.focalDistance;

    // Calculate the vectors across the horizontal and down the vertical viewport edges.
    vec3 horizontal = vec3(viewport_width, 0, 0);
    vec3 vertical = vec3(0, -viewport_height, 0);

    vec3 lower_left_corner = ubo.cameraPos - horizontal / 2 - vertical / 2 - vec3(0, 0, focal_length);
    vec2 uv = (gl_GlobalInvocationID.xy) / image_size.xy;

    Ray r;
    r.origin = ubo.cameraPos;
    r.direction = lower_left_corner + uv.x * horizontal + uv.y * vertical - r.origin;

    vec3 pixelColor = TraceRay(r);
    imageStore(targetTexture, ivec2(gl_GlobalInvocationID.xy), vec4(pixelColor, 0.0));

}
